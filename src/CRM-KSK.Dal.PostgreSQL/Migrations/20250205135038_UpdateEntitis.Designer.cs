// <auto-generated />
using System;
using CRM_KSK.Dal.PostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CRM_KSK.Dal.PostgreSQL.Migrations
{
    [DbContext(typeof(CRM_KSKDbContext))]
    [Migration("20250205135038_UpdateEntitis")]
    partial class UpdateEntitis
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CRM_KSK.Core.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passwordHash");

                    b.HasKey("Id")
                        .HasName("pK_admins");

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastName");

                    b.Property<string>("LevelOfTraining")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("levelOfTraining");

                    b.Property<string>("ParentName")
                        .HasColumnType("text")
                        .HasColumnName("parentName");

                    b.Property<string>("ParentPhone")
                        .HasColumnType("text")
                        .HasColumnName("parentPhone");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("scheduleId");

                    b.Property<Guid?>("TrainerId")
                        .HasColumnType("uuid")
                        .HasColumnName("trainerId");

                    b.HasKey("Id")
                        .HasName("pK_clients");

                    b.HasIndex("ScheduleId")
                        .HasDatabaseName("iX_clients_scheduleId");

                    b.HasIndex("TrainerId")
                        .HasDatabaseName("iX_clients_trainerId");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("clientId");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateEnd");

                    b.Property<DateOnly>("DateStart")
                        .HasColumnType("date")
                        .HasColumnName("dateStart");

                    b.Property<string>("StatusMembership")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statusMembership");

                    b.HasKey("Id")
                        .HasName("pK_memberships");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("iX_memberships_clientId");

                    b.ToTable("memberships", (string)null);
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("clientId");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uuid")
                        .HasColumnName("membershipId");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("paymentMethod");

                    b.Property<decimal>("Summa")
                        .HasColumnType("numeric")
                        .HasColumnName("summa");

                    b.HasKey("Id")
                        .HasName("pK_payment");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("iX_payment_clientId");

                    b.HasIndex("MembershipId")
                        .HasDatabaseName("iX_payment_membershipId");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("clientId");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval")
                        .HasColumnName("time");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uuid")
                        .HasColumnName("trainerId");

                    b.Property<int>("TypeTrainings")
                        .HasColumnType("integer")
                        .HasColumnName("typeTrainings");

                    b.HasKey("Id")
                        .HasName("pK_schedules");

                    b.HasIndex("TrainerId")
                        .HasDatabaseName("iX_schedules_trainerId");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastName");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Specialization")
                        .HasColumnType("text")
                        .HasColumnName("specialization");

                    b.Property<string>("Surname")
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pK_trainers");

                    b.ToTable("trainers", (string)null);
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Client", b =>
                {
                    b.HasOne("CRM_KSK.Core.Entities.Schedule", null)
                        .WithMany("Clients")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("fK_clients_schedules_scheduleId");

                    b.HasOne("CRM_KSK.Core.Entities.Trainer", "Trainer")
                        .WithMany("Clients")
                        .HasForeignKey("TrainerId")
                        .HasConstraintName("fK_clients_trainers_trainerId");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Membership", b =>
                {
                    b.HasOne("CRM_KSK.Core.Entities.Client", "Client")
                        .WithOne("Membership")
                        .HasForeignKey("CRM_KSK.Core.Entities.Membership", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_memberships_clients_clientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Payment", b =>
                {
                    b.HasOne("CRM_KSK.Core.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fK_payment_clients_clientId");

                    b.HasOne("CRM_KSK.Core.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .HasConstraintName("fK_payment_memberships_membershipId");

                    b.Navigation("Client");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Schedule", b =>
                {
                    b.HasOne("CRM_KSK.Core.Entities.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_schedules_trainers_trainerId");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Client", b =>
                {
                    b.Navigation("Membership");
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Schedule", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("CRM_KSK.Core.Entities.Trainer", b =>
                {
                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
