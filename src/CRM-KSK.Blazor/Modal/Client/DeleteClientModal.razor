@inject ClientServiceBlazor ClientService

@if (IsVisible)
{
        <div class="modal-overlay" style="@(IsVisible ? "display:flex;" : "display:none;")">
            <div class="modal-content">

                <h2>Удалить клиента</h2>

                <form @onsubmit="DeleteClient">
                    <div class="form-group">
                        <label for="phone">Номер телефона</label>
                        <input id="phone" name="phone" type="tel" @bind="_phoneNumber" required />
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-danger">Удалить</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Отмена</button>
                    </div>
                </form>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(message))
        {
            <p class="alert @(message.Contains("Ошибка") ? "alert-danger" : "alert-success")">@message</p>
        }
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    private string _phoneNumber = string.Empty;
    private string message = string.Empty;

    private async Task DeleteClient()
    {
        var response = await ClientService.DeleteClientAsync(_phoneNumber);
        if (response)
        {
            message = "Пользователь удален!";
            await CloseModal();
        }
        else
        {
            message = "Ошибка удаления";
        }
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }
}
