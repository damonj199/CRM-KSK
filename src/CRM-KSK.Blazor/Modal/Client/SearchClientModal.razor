@inject ClientServiceBlazor ClientService
@inject NavigationManager Navigation
@inject ClientStateService ClientState

@if (IsVisible)
{
    <div class="modal-overlay" style="@(IsVisible ? "display:flex;" : "display:none;")">
        <div class="modal-content">

            <h2>Найти клиента</h2>

            <form @onsubmit="SearchClient">
                <div class="form-group">
                    <label for="name">Имя клиента:</label>
                    <InputText id="name" name="name" @bind-Value="_firstName" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="lastName">Фамилия клиента:</label>
                    <InputText id="lastName" name="lastName" @bind-Value="_lastName" class="form-control" />
                </div>
                <div class="from-actions">
                    <button class="btn btn-primary" type="submit">Найти</button>
                    <button class="btn btn-secondary" @onclick="CloseModal">Отмена</button>
                </div>
            </form>

            @if (clients != null && clients.Any())
            {
                <h4>Найденные клиенты</h4>
                <ul class="list-group">
                    @foreach (var client in clients)
                    {
                        <li class="list-group-item">
                            <a href="#" class="text-primary" @onclick="() => ShowClientDetails(client)">
                                @client.FirstName @client.LastName +7 @client.Phone
                            </a>
                        </li>
                    }
                </ul>
            }
            else if (clients != null)
            {
                <div class="mt-3 alert alert-warning">Клиенты не найдены.</div>
            }
        </div>
    </div>
}



@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    private string _firstName = string.Empty;
    private string _lastName = string.Empty;
    private IReadOnlyList<ClientDto> clients;

    private async Task SearchClient()
    {
        Console.WriteLine($"Передаем данные для поиска {_firstName} {_lastName}");

        var result = await ClientService.GetClientsByNameAsync(_firstName, _lastName);
        clients = result;
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }

    private void ShowClientDetails(ClientDto client)
    {
        ClientState.SetClient(client);
        Navigation.NavigateTo("client-details", forceLoad: true);
    }
}
