@inject ClientServiceBlazor ClientService
@inject NavigationManager Navigation
@inject ClientStateService ClientState

@if (IsVisible)
{
    <div class="modal-overlay" @onclick="HandleOverlayClick" style="@(IsVisible ? "display:flex;" : "display:none;")">
        <div class="modal-content" @onclick:stopPropagation="true">

            <h2>Найти клиента</h2>

            <form @onsubmit="SearchClient">
                <div class="form-group">
                    <label for="name">Имя клиента:</label>
                    <InputText id="name" name="name" @bind-Value="_firstName" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="lastName">Фамилия клиента:</label>
                    <InputText id="lastName" name="lastName" @bind-Value="_lastName" class="form-control" />
                </div>
                <div class="from-actions">
                    <button class="btn btn-primary" type="submit">Найти</button>
                    <button class="btn btn-secondary" @onclick="CloseModal">Отмена</button>
                </div>
            </form>

            @if (clients != null && clients.Any())
            {
                <h4 class="mt-3">Клиенты</h4>
                <div class="search-list-container">
                <ul class="list-group">
                    @foreach (var client in clients)
                    {
                        <li class="list-group-item">
                            <a href="/client-details" class="text-primary" @onclick="() => ShowClientDetails(client)">
                                @client.FirstName @client.LastName @FormatPhoneNumber(client.Phone)
                            </a>
                        </li>
                    }
                    </ul>
                </div>
            }
            else if (clients?.Count != 0)
            {
                <div class="mt-3 alert alert-warning">Клиенты не найдены.</div>
            }
        </div>
    </div>
}

<style>
    
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    private string _firstName = string.Empty;
    private string _lastName = string.Empty;
    private IReadOnlyList<ClientDto> clients = [];

    private async Task SearchClient()
    {
        clients = await ClientService.GetClientsByNameAsync(_firstName, _lastName);
    }

    private async Task CloseModal()
    {
        _firstName = string.Empty;
        _lastName = string.Empty;
        clients = [];
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }

    private void ShowClientDetails(ClientDto client)
    {
        
        ClientState.SelectedClient = client;
        Navigation.NavigateTo("/client-details");
    }

    private string FormatPhoneNumber(string phone)
    {
        return $"+7 ({phone.Substring(0, 3)}) {phone.Substring(3, 3)}-{phone.Substring(6, 2)}-{phone.Substring(8, 2)}";
    }

    private async Task HandleOverlayClick()
    {
        await CloseModal();
    }
}
