@inject TrainerServiceBlazor TrainerService

@if (IsVisible)
{
    <div class="modal-overlay" style="@(IsVisible ? "display:flex;" : "display:none;")">
        <div class="modal-content">

            <h2>Удалить тренера</h2>

            <form @onsubmit="DeleteClient">
                <div class="form-group">
                    <label for="name">Имя:</label>
                    <input id="name" name="name" type="tel" @bind="_firstName" required />
                </div>
                <div class="form-group">
                    <label for="lastName">Фамилия:</label>
                    <input id="lastName" name="lastName" type="tel" @bind="_lastName" required />
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn btn-danger">Удалить</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Отмена</button>
                </div>
            </form>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(message))
    {
        <p class="alert @(message.Contains("Ошибка") ? "alert-danger" : "alert-success")">@message</p>
    }
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    private string _firstName = string.Empty;
    private string _lastName = string.Empty;
    private string message = string.Empty;

    private async Task DeleteClient()
    {
        var response = await TrainerService.DeleteTrainer(_firstName, _lastName);
        if (response)
        {
            message = "Тренер удален!";
            await CloseModal();
        }
        else
        {
            message = "Ошибка удаления";
        }
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }
}
