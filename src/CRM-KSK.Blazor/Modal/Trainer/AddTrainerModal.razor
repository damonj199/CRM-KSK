@inject TrainerServiceBlazor TrainerService

@if (IsVisible)
{
    <EditForm Model="trainer" OnValidSubmit="AddTrainer">
        <DataAnnotationsValidator />

        <div class="modal-overlay" @onclick="HandleOverlayClick" style="@(IsVisible ? "display:flex;" : "display:none;")">
            <div class="modal-content" @onclick:stopPropagation="true">
                <h3>Добавить тренера</h3>

                <div class="form-group">
                    <label for="firstName">Имя:</label>
                    <InputText id="firstName" name="firstName" @bind-Value="trainer.FirstName" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="lastName">Фамилия:</label>
                    <InputText id="lastName" name="lastName" @bind-Value="trainer.LastName" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="surname">Отчество:</label>
                    <InputText id="surname" name="surname" @bind-Value="trainer.Surname" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="phone">Телефон: +7</label>
                    <InputText id="phone" name="phone" @bind-Value="trainer.Phone" class="form-control" maxLength="10" />
                </div>
                <div class="form-group">
                    <label for="dob">Дата рождения:</label>
                    <InputDate id="dob" name="dob" @bind-Value="trainer.DateOfBirth" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="color">Цвет:</label>
                    <InputText type="color" id="color" name="color" @bind-Value="trainer.Color" class="form-control" />
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Сохранить</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Отмена</button>
                </div>

                @if (!string.IsNullOrEmpty(message))
                {
                    <p class="alert @(message.Contains("Ошибка") ? "alert-danger" : "alert-success")">@message</p>
                }
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback OnTrainerAdded { get; set; }

    private TrainerDto trainer = new();
    private string message = string.Empty;

    private async Task AddTrainer()
    {
        message = await TrainerService.AddTrainer(trainer);

        if (!string.IsNullOrEmpty(message) && message.Contains("Успешно"))
        {
            await OnTrainerAdded.InvokeAsync();
            await CloseModal();
        }
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        trainer = new();
        message = string.Empty;
        await IsVisibleChanged.InvokeAsync(IsVisible);
        StateHasChanged();
    }

    private async Task HandleOverlayClick()
    {
        await CloseModal();
    }
}
