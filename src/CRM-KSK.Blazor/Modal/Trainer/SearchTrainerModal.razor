@inject TrainerServiceBlazor TrainerService

@if (IsVisible)
{
    <div class="modal-overlay" style="@(IsVisible ? "display:flex;" : "display:none;")">
        <div class="modal-content">

            <h2>Найти тренера</h2>

            <form @onsubmit="SearchTrainer">
                <div class="form-group">
                    <label for="name">Имя тренера:</label>
                    <InputText id="name" name="name" @bind-Value="_firstName" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="lastName">Фамилия тренера:</label>
                    <InputText id="lastName" name="lastName" @bind-Value="_lastName" class="form-control" />
                </div>
                <div class="from-actions">
                    <button class="btn btn-primary" @onclick="SearchTrainer">Найти</button>
                    <button class="btn btn-secondary" @onclick="CloseModal">Отмена</button>
                </div>
            </form>

            @if (trainers != null && trainers.Any())
            {
                @foreach (var trainer in trainers)
                {
                    <div>
                        <h3>Результат:</h3>
                        <p>Имя: @trainer.FirstName @trainer.LastName</p>
                        <p>Телефон: +7 @trainer.Phone</p>
                    </div>
                }
            }
            else
            {
                <div class="mt-3 alert alert-warning">тренер не найден.</div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    private string _firstName = string.Empty;
    private string _lastName = string.Empty;
    private List<TrainerDto> trainers;

    private async Task SearchTrainer()
    {
        Console.WriteLine($"Передаем данные для поиска {_firstName} {_lastName}");

        var result = await TrainerService.GetTrainerByName(_firstName, _lastName);
        trainers = result;
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }
}
