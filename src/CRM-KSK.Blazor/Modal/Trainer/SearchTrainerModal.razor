@inject TrainerServiceBlazor TrainerService
@inject NavigationManager Navigation
@inject TrainerStateService TrainerState

@if (IsVisible)
{
    <EditForm Model="@nameDto" OnValidSubmit="@SearchTrainer">
        <DataAnnotationsValidator />

        <div class="modal-overlay" @onclick="HandleOverlayClick" style="@(IsVisible ? "display:flex;" : "display:none;")">
            <div class="modal-content" @onclick:stopPropagation="true">

                <h2>Найти тренера</h2>

                <div class="form-group">
                    <label for="name">Имя тренера:</label>
                    <InputText id="firstName" name="firstName" @bind-Value="nameDto.FirstName" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="lastName">Фамилия тренера:</label>
                    <InputText id="lastName" name="lastName" @bind-Value="nameDto.LastName" class="form-control" />
                </div>
                <div class="from-actions">
                    <button type="submit" class="btn btn-primary" >Найти</button>
                    <button class="btn btn-secondary" @onclick="CloseModal">Отмена</button>
                </div>
                <button class="btn btn-primary mt-2" @onclick="GetAllTrainers">Показать всех тренеров</button>

                @if (trainers != null && trainers.Any())
                {
                    <h4 class="mt-3">Тренеры</h4>
                    <ul class="list-group">
                        @foreach (var trainer in trainers)
                        {
                            <li class="list-group-item">
                                <a href="/trainer-details" class="text-primary" @onclick="() => ShowTrainerDetails(trainer)">
                                    @trainer.FirstName @trainer.LastName +7 (@trainer.Phone)
                                </a>
                            </li>
                        }
                    </ul>
                }
                else if (trainers?.Count != 0)
                {
                    <div class="mt-3 alert alert-warning">Тренер не найден.</div>
                }
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    private SearchNameDto nameDto = new();
    private List<TrainerDto> trainers = [];

    private async Task SearchTrainer()
    {
        trainers.Clear();

        var result = await TrainerService.GetTrainerByName(nameDto);
        trainers.Add(result);
    }

    private async Task GetAllTrainers()
    {
        trainers.Clear();

        trainers = await TrainerService.GetAllTrainers();
    }

    private async Task CloseModal()
    {
        nameDto.FirstName = string.Empty;
        nameDto.FirstName = string.Empty;
        trainers = [];
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }

    private void ShowTrainerDetails(TrainerDto trainer)
    {
        TrainerState.SelectedTrainer = trainer;
        Navigation.NavigateTo("/trainer-details");
    }

    private async Task HandleOverlayClick()
    {
        await CloseModal();
    }
}
