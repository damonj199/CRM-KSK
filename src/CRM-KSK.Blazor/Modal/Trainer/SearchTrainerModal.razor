@inject TrainerServiceBlazor TrainerService
@inject NavigationManager Navigation
@inject TrainerStateService TrainerState

@if (IsVisible)
{
    <div class="modal-overlay" @onclick="HandleOverlayClick" style="@(IsVisible ? "display:flex;" : "display:none;")">
        <div class="modal-content" @onclick:stopPropagation="true">

            <h2>Найти тренера</h2>

            <form @onsubmit="SearchTrainer">
                <div class="form-group">
                    <label for="name">Имя тренера:</label>
                    <InputText id="name" name="name" @bind-Value="_firstName" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="lastName">Фамилия тренера:</label>
                    <InputText id="lastName" name="lastName" @bind-Value="_lastName" class="form-control" />
                </div>
                <div class="from-actions">
                    <button class="btn btn-primary" @onclick="SearchTrainer">Найти</button>
                    <button class="btn btn-secondary" @onclick="CloseModal">Отмена</button>
                </div>
            </form>

            @if (trainers != null && trainers.Any())
            {
                <h4>Тренеры</h4>
                <ul class="list-group">
                    @foreach (var trainer in trainers)
                    {
                        <li class="list-group-item">
                            <a href="/trainer-details" class="text-primary" @onclick="() => ShowTrainerDetails(trainer)">
                                @trainer.FirstName @trainer.LastName +7 (@trainer.Phone)
                            </a>
                        </li>
                    }
                </ul>
            }
            else if (trainers != null)
            {
                <div class="mt-3 alert alert-warning">тренер не найден.</div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    private string _firstName = string.Empty;
    private string _lastName = string.Empty;
    private List<TrainerDto> trainers;

    private async Task SearchTrainer()
    {
        var result = await TrainerService.GetTrainerByName(_firstName, _lastName);
        trainers = result;
    }

    private async Task CloseModal()
    {
        _firstName = string.Empty;
        _lastName = string.Empty;
        trainers = null;
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }

    private void ShowTrainerDetails(TrainerDto trainer)
    {
        TrainerState.SelectedTrainer = trainer;
        Navigation.NavigateTo("/trainer-details");
    }

    private async Task HandleOverlayClick()
    {
        await CloseModal();
    }
}
