@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<RadzenStyleSheet />
<RadzenScripts />

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="typeof(MainLayout)">
                <NotAuthorized>
                    <RedirectToLogin />
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <p>Страница не найдена!</p>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if ((user == null || !(user.Identity?.IsAuthenticated ?? false))
        && !Navigation.Uri.Contains("/login", StringComparison.OrdinalIgnoreCase))
        {
            Navigation.NavigateTo("/login", true);
        }
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login", true);
    }
}