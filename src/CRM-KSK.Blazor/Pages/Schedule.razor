@page "/schedule"
@using System.Globalization
@inject ClientServiceBlazor _clientService
@inject TrainerServiceBlazor _trainerService
@inject ScheduleServiceBlazor _scheduleService
@inject NavigationManager Navigation

<div style="display: flex; justify-content: space-between; align-items: center;">
    <h3>Расписание тренировок</h3>
    <a href="/history" @onclick="() => ShowHistory()"> История тренировок</a>
</div>

<div class="table-conrainer">
    <table class="schedule-table">
        <thead>
            <tr>
                <th>Время</th>
                @foreach (var day in DaysOfWeekWithDates)
                {
                    <th>@day</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var time in TimeSlots)
            {
                <tr>
                    <td>@time</td>
                    @foreach (var day in DaysOfWeekWithDates)
                    {
                        <td class="schedule-cell" @onclick="() => OpenModal(day, time)">
                            @GetCellContent(day, time)
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@if (IsModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <h4>Добавить тренировку</h4>

            <label>Тренер:</label>
            <select @bind="SelectedTrainerId">
                <option value="">Выберите тренера</option>

                @foreach (var trainer in Trainers)
                {
                    <option value="@trainer.Id">@trainer.FirstName @trainer.LastName</option>
                }
            </select>

            <label>Клиенты:</label>
            <select multiple @bind="SelectedClientId">
                <option value="">Выберите клиента</option>
                @foreach (var client in Clients)
                {
                    <option value="@client.Id">@client.FirstName @client.LastName</option>
                }
            </select>
            <div class="from-actions mt-2">
                <button class="btn btn-primary" @onclick="SaveTraining">Сохранить</button>
                <button @onclick="CloseModal">Отмена</button>
            </div>
            <div class="from-actions">
                @if(SelectedTrainingId != null)
                {
                    <button class="btn btn-danger mt-2" @onclick="() => DeleteTraining(SelectedTrainingId.Value)">Отменить тренировку</button>
                }
            </div>
        </div>
    </div>
}

<style>
    .table-container {
    width: 100%;
    overflow-x: auto;
    }

    .schedule-table {
    width: 100%;
    border-collapse: collapse;
    text-align: center;
    }

    .schedule-table th, .schedule-table td {
    border: 1px solid #ccc;
    padding: 8px;
    max-height: 100px;

    }

    .schedule-table th {
    background-color: #f4f4f4;
    }

    .schedule-cell {
    cursor: pointer;
    height: 50px;
    }

    .schedule-cell:hover {
    background-color: #eef;
    }

    .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    }

    .modal-content {
    background: white;
    padding: 20px;
    border-radius: 5px;
    width: 300px;
    text-align: center;
    }

    .modal-buttons {
    margin-top: 15px;
    }

    .modal-buttons button {
    margin: 5px;
    padding: 5px 10px;
    }
</style>

@code {
    private readonly List<string> TimeSlots = GenerateTimeSlots("09:00", "21:00");
    private List<string> DaysOfWeekWithDates = new();
    private Dictionary<(string Day, string Time), string> ScheduleData = new();

    private List<TrainerDto> Trainers = [];
    private IReadOnlyList<ClientDto> Clients = [];
    private IReadOnlyList<ScheduleDto> Schedules = [];

    private Guid? SelectedTrainerId;
    private string[] SelectedClientId = [];
    private Guid? SelectedTrainingId;

    private string SelectedDay = string.Empty;
    private string SelectedTime = string.Empty;

    private bool IsModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        GenerateDaysOfWeekWithDates();
        await LoadDataFromApi();
        await LoadScheduleFromApi();
        EnsureScheduleDataInitialized();
    }

    private void ShowHistory()
    {
        Navigation.NavigateTo("/history");
    }

    private void GenerateDaysOfWeekWithDates()
    {
        var today = DateTime.Today;
        DaysOfWeekWithDates = Enumerable.Range(0, 7)
            .Select(i => today.AddDays(i).ToString("dddd, dd MMMM"))
            .ToList();
    }

    private async Task LoadDataFromApi()
    {
        Trainers = await _trainerService.GetAllTrainers() ?? [];
        Clients = await _clientService.GetClientsByNameAsync() ?? [];
    }

    private async Task LoadScheduleFromApi()
    {
        Schedules = await _scheduleService.GetWeeksSchedule();
        ScheduleData.Clear();
        LoadUI();
    }

    private void LoadUI()
    {
        foreach (var schedule in Schedules)
        {
            var dayKey = schedule.Date.ToString("dddd, dd MMMM", new CultureInfo("ru-RU"));
            var timeKey = schedule.Time.ToString(@"hh\:mm");

            var trainerFullName = $"{schedule.Trainer.LastName} {schedule.Trainer.FirstName}";
            var clientFullName = string.Join(", ", schedule.Clients.Select(c => $"{c.LastName} {c.FirstName}"));

            ScheduleData[(dayKey, timeKey)] = $"{trainerFullName} - {clientFullName} ({schedule.TypeTrainings})";
        }
    }

    private void EnsureScheduleDataInitialized()
    {
        foreach (var day in DaysOfWeekWithDates)
        {
            foreach (var time in TimeSlots)
            {
                if (!ScheduleData.ContainsKey((day, time)))
                {
                    ScheduleData[(day, time)] = " ";
                }
            }
        }
    }

    private static List<string> GenerateTimeSlots(string start, string end)
    {
        var timeSlots = new List<string>();
        var startTime = DateTime.ParseExact(start, "HH:mm", CultureInfo.InvariantCulture);
        var endTime = DateTime.ParseExact(end, "HH:mm", CultureInfo.InvariantCulture);

        while (startTime < endTime)
        {
            timeSlots.Add(startTime.ToString("HH:mm"));
            startTime = startTime.AddMinutes(60);
        }

        return timeSlots;
    }

    private void OpenModal(string day, string time)
    {
        SelectedDay = day;
        SelectedTime = time;

        var existingSchedule = Schedules.FirstOrDefault(s =>
        s.Date.ToString("dddd, dd MMMM", new CultureInfo("ru-RU")) == day &&
        s.Time.ToString(@"hh\:mm") == time);

        SelectedTrainingId = existingSchedule?.Id;

        IsModalOpen = true;
    }

    private void CloseModal()
    {
        IsModalOpen = false;
        SelectedTrainerId = null;
        SelectedClientId = [];
    }

    private async Task SaveTraining()
    {
        if (SelectedTrainerId != null && SelectedClientId.Length > 0)
        {
            var trainerDto = Trainers.FirstOrDefault(t => t.Id == SelectedTrainerId.Value);

            var selectedClientGuid = SelectedClientId.Select(id => Guid.Parse(id)).ToList();
            var clientDtos = Clients.Where(c => selectedClientGuid.Contains(c.Id)).ToList();

            var trainingType = clientDtos.Count > 1 ? TypeTrainings.Групповая : TypeTrainings.Индивидуальная;

            var existingSchedule = Schedules.FirstOrDefault(s =>
            s.Date.ToString("dddd, dd MMMM", new CultureInfo("ru-RU")) == SelectedDay &&
            s.Time.ToString(@"hh\:mm") == SelectedTime);

            var scheduleId = existingSchedule?.Id ?? Guid.Empty;

            var training = new ScheduleDto
                {
                    Id = scheduleId,
                    Date = DateOnly.Parse(SelectedDay, new CultureInfo("ru-RU")),
                    Time = TimeSpan.Parse(SelectedTime),
                    Trainer = new ScheduleMemberDto
                    {
                        Id = trainerDto.Id,
                        FirstName = trainerDto.FirstName,
                        LastName = trainerDto.LastName
                    },
                    Clients = clientDtos.Select(c => new ScheduleMemberDto
                    {
                        Id = c.Id,
                        FirstName = c.FirstName,
                        LastName = c.LastName
                    }).ToList(),
                    TypeTrainings = trainingType
                };

            await _scheduleService.AddOrUpdateSchedule(training);
            await LoadScheduleFromApi();
            EnsureScheduleDataInitialized();
        }

        CloseModal();
    }

    private string GetCellContent(string day, string time)
    {
        return ScheduleData.TryGetValue((day, time), out var content) ? content : " ";
    }

    private async Task DeleteTraining(Guid id)
    {
        if (id == Guid.Empty)
            return;

        var trainingToRemove = Schedules.FirstOrDefault(t => t.Id == id);

        if(trainingToRemove != null)
        {
            Schedules = Schedules.Where(t => t.Id != id).ToList();
            UpdateScheduleData();
        }
        await _scheduleService.DeleteTrainingAsync(id);
        await LoadDataFromApi();
        EnsureScheduleDataInitialized();

        CloseModal();
    }

    private void UpdateScheduleData()
    {
        ScheduleData.Clear();
        LoadUI();
    }
}
