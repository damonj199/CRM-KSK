@page "/login"
@using System.IdentityModel.Tokens.Jwt
@inject HttpClient _http
@inject NavigationManager _navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>Авторизация</PageTitle>

<h3>Вход в систему</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="phone">Номер телефона:</label>
        <InputText id="phone" @bind-Value="loginModel.Phone" />
    </div>

    <div>
        <label for="password">Пароль:</label>
        <InputText id="password" type="password" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit">Войти</button>
</EditForm>

@code {
    private LoginRequest loginModel = new();

    private async Task HandleLogin()
    {
        var response = await _http.PostAsJsonAsync("api/Admins/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();

            var jwt = loginResponse.Token;

            var tokenHandler = new JwtSecurityTokenHandler();
            var token = tokenHandler.ReadJwtToken(jwt);
            var res = token.ValidTo < DateTime.UtcNow;

            if (token.ValidTo < DateTime.UtcNow)
            {
                Console.WriteLine("Токен истёк");
            }
            else
            {
                Console.WriteLine("Токен действителен");
            }

            await ((CustomAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthenticationAsync(jwt);

            _navigation.NavigateTo("/", true);
        }
        else
        {
            Console.WriteLine("Ошибка аутентификации");
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
}
