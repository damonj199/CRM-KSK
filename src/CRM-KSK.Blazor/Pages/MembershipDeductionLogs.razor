@page "/membership-deduction-logs"
@using CRM_KSK.Application.Dtos
@using CRM_KSK.Core.Enums
@using CRM_KSK.Blazor.Services
@inject MembershipDeductionLogServiceBlazor LogService
@inject NavigationManager Navigation
@inject ClientServiceBlazor ClientService
@inject MembershipServiceBlazor MembershipService

<PageTitle>Списания занятий</PageTitle>

<div class="container-fluid">
    <!-- Заголовок страницы -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="page-header">
                <h2 class="page-title">
                    <i class="bi bi-clock-history me-2"></i>
                    Логи списаний занятий
                </h2>
            </div>
        </div>
    </div>

    <!-- Фильтры и статистика -->
    <div class="row mb-4">
        <div class="col-md-4 col-lg-3">
            <div class="card">
                <div class="card-body py-3">
                    <!-- Дата и кнопка поиска в одной строке -->
                    <div class="d-flex align-items-center gap-2 mb-2">
                        <label class="form-label mb-0" style="min-width: 50px;">Дата:</label>
                        <input type="date" class="form-control form-control-sm" style="max-width: 150px;" @bind="selectedDate" @bind:format="yyyy-MM-dd"/>
                        <button class="btn btn-primary btn-sm" @onclick="LoadLogs">
                            <i class="bi bi-search"></i> Найти
                        </button>
                    </div>
                    
                    <!-- Быстрые кнопки выбора даты -->
                    <div class="btn-group btn-group-sm" role="group">
                        <button type="button" class="btn btn-outline-secondary" @onclick="() => SetDate(DateTime.Today.AddDays(-1))">Вчера</button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="() => SetDate(DateTime.Today.AddDays(-2))">Позавчера</button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="() => SetDate(DateTime.Today.AddDays(-7))">Неделю назад</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Статистика -->
        <div class="col-md-8 col-lg-9">
            <div class="row g-2">
                <!-- Карточка клиентов -->
                <div class="col-12">
                    <div class="stats-card clients-card">
                        <div class="stats-content">
                            <div class="stat-icon">
                                <i class="bi bi-people"></i>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Всего</span>
                                <span class="stat-number">@totalClients</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Активных</span>
                                <span class="stat-number active">@activeClients</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Карточка абонементов -->
                <div class="col-12">
                    <div class="stats-card memberships-card">
                        <div class="stats-content">
                            <div class="stat-icon">
                                <i class="bi bi-credit-card"></i>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Активных</span>
                                <span class="stat-number">@activeMemberships</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Разовых</span>
                                <span class="stat-number one-time">@oneTimeMemberships</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Утренних</span>
                                <span class="stat-number morning">@morningMemberships</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Таблица логов -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Логи списаний</h5>
            <span class="badge bg-secondary">Всего записей: @Logs.Count</span>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Загрузка...</span>
                    </div>
                </div>
            }
            else if (Logs.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Дата</th>
                                <th>Клиент</th>
                                <th>Тип тренировки</th>
                                <th>Занятий до</th>
                                <th>Занятий после</th>
                                <th>Дата расписания</th>
                                <th>Тренер</th>
                                <th>Статус абонемента</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in Logs)
                            {
                                <tr>
                                    <td>@log.DeductionDate.ToString("dd.MM.yyyy")</td>
                                    <td>@log.ClientFullName</td>
                                    <td>
                                        @log.TrainingType.GetDisplayName()
                                        @if (log.IsMorningMembership && log.IsOneTimeTraining)
                                        {
                                            <span class="badge bg-info"> У/Р</span>
                                        }
                                        @if (log.IsMorningMembership)
                                        {
                                            <span class="badge bg-warning"> У </span>
                                        }
                                        @if (log.IsOneTimeTraining)
                                        {
                                            <span class="badge bg-info"> Р </span>
                                        }
                                    </td>
                                    <td>@log.TrainingsBeforeDeduction</td>
                                    <td>@log.TrainingsAfterDeduction</td>
                                    <td>@log.ScheduleDate</td>
                                    <td>@log.TrainerName</td>
                                    <td>
                                        @if (log.MembershipExpired)
                                        {
                                            <span class="badge bg-danger">Завершен</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">Активен</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center text-muted">
                    <p>Логи списаний не найдены</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<MembershipDeductionLogDto> Logs = new();
    private bool isLoading = false;
    private DateTime selectedDate = DateTime.Today.AddDays(-1); // Вчерашняя дата по умолчанию
    
    // Статистика
    private int totalClients = 0;
    private int activeClients = 0;
    private int activeMemberships = 0;
    private int oneTimeMemberships = 0;
    private int morningMemberships = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
        await LoadStatistics();
    }

    private async Task LoadLogs()
    {
        isLoading = true;
        try
        {
            Logs = (await LogService.GetDeductionLogsAsync(DateOnly.FromDateTime(selectedDate))).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки логов: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SetDate(DateTime date)
    {
        selectedDate = date;
        await LoadLogs();
    }

    private async Task LoadStatistics()
    {
        // Получаем всех клиентов
        var allClients = await ClientService.GetAllClientsWithMemberships();
        totalClients = allClients.Count;

        // Подсчитываем активных клиентов (есть абонементы или были за последние 2 месяца)
        var twoMonthsAgo = DateTime.Today.AddMonths(-2);
        activeClients = allClients.Count(c => 
            c.Memberships?.Any(m => 
                m.StatusMembership == StatusMembership.Active || 
                m.IsOneTimeTraining ||
                m.DateEnd >= DateOnly.FromDateTime(twoMonthsAgo)
            ) == true);

        // Подсчитываем активные абонементы
        var allMemberships = new List<MembershipDto>();
        foreach (var client in allClients)
        {
            if (client.Memberships != null)
            {
                allMemberships.AddRange(client.Memberships);
            }
        }

        activeMemberships = allMemberships.Count(m => 
            m.StatusMembership == StatusMembership.Active || m.IsOneTimeTraining);
            
        oneTimeMemberships = allMemberships.Count(m => m.IsOneTimeTraining);
        morningMemberships = allMemberships.Count(m => m.IsMorning);
    }

    private string GetTrainingTypeName(TypeTrainings type)
    {
        return type switch
        {
            TypeTrainings.Sport => "60 Спорт",
            TypeTrainings.Light => "60 Лайт",
            TypeTrainings.BabiesHalf => "30М",
            TypeTrainings.BabiesMixed => "30+30",
            TypeTrainings.Babies => "60М",
            TypeTrainings.Hippotherapy => "Иппотерапия",
            TypeTrainings.PhysicalTraining => "ОФП",
            TypeTrainings.Rent => "Аренда",
            TypeTrainings.Owner => "Частный владелец",
            TypeTrainings.Voltiger => "Вольтижировка",
            TypeTrainings.Group => "Группа",
            TypeTrainings.ExerciseMachine30 => "Тренажёры 30",
            TypeTrainings.ExerciseMachine45 => "Тренажёры 45",
            TypeTrainings.Unknown => "Неизвестно",
            _ => type.ToString()
        };
    }
}

<style>
    /* Стили для статистических карточек */
    .stats-card {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 12px 16px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        height: 100%;
    }

    .stats-card:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .clients-card {
        border-left: 4px solid #28a745;
    }

    .memberships-card {
        border-left: 4px solid #007bff;
    }

    .stats-content {
        display: flex;
        align-items: center;
        gap: 15px;
        height: 100%;
    }

    .stats-icon {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 16px;
        color: white;
        flex-shrink: 0;
    }

    .clients-card .stats-icon {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    }

    .memberships-card .stats-icon {
        background: linear-gradient(135deg, #007bff 0%, #6610f2 100%);
    }

    .stat-item {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-right: 15px;
    }

    .stat-item:last-child {
        margin-right: 0;
    }

    .stat-number {
        font-size: 18px;
        font-weight: 700;
        color: #212529;
        line-height: 1;
    }

    .stat-number.active {
        color: #28a745;
    }

    .stat-number.one-time {
        color: #ffc107;
    }

    .stat-number.morning {
        color: #fd7e14;
    }

    .stat-label {
        font-size: 13px;
        color: #6c757d;
        font-weight: 500;
        white-space: nowrap;
    }

    /* Адаптивность для мобильных устройств */
    @@media (max-width: 768px) {
        .d-flex.align-items-center.gap-2 {
            flex-direction: column;
            align-items: stretch !important;
            gap: 0.5rem !important;
        }
        
        .d-flex.align-items-center.gap-2 label {
            min-width: auto !important;
        }
        
        .d-flex.align-items-center.gap-2 input {
            max-width: none !important;
        }
        
        .btn-group {
            flex-wrap: wrap;
        }
        
        .btn-group .btn {
            flex: 1;
            min-width: 80px;
        }

        .stats-card {
            padding: 10px 12px;
        }

        .stats-content {
            gap: 12px;
        }

        .stats-icon {
            width: 30px;
            height: 30px;
            font-size: 14px;
        }

        .stat-item {
            margin-right: 12px;
        }

        .stat-number {
            font-size: 16px;
        }

        .stat-label {
            font-size: 12px;
        }
    }

    @@media (max-width: 576px) {
        .stats-card {
            padding: 8px 10px;
        }

        .stats-content {
            flex-wrap: wrap;
            gap: 8px;
        }

        .stats-icon {
            width: 28px;
            height: 28px;
            font-size: 13px;
        }

        .stat-item {
            margin-right: 8px;
            gap: 4px;
        }

        .stat-number {
            font-size: 14px;
        }

        .stat-label {
            font-size: 11px;
        }
    }
}
</style>