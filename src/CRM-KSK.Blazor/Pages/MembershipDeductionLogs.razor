@page "/membership-deduction-logs"
@using CRM_KSK.Application.Dtos
@using CRM_KSK.Core.Enums
@using CRM_KSK.Blazor.Services
@inject MembershipDeductionLogServiceBlazor LogService
@inject NavigationManager Navigation

<PageTitle>Логи списаний занятий</PageTitle>

<div class="container-fluid">
    <h2 class="mb-4">Логи списаний занятий</h2>

    <!-- Компактные фильтры -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body py-3">
                    <div class="row align-items-center">
                        <div class="col-md-4">
                            <label class="form-label mb-1">Дата:</label>
                        </div>
                        <div class="col-md-6">
                            <input type="date" class="form-control form-control-sm" @bind="selectedDate" @bind:format="yyyy-MM-dd"/>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-primary btn-sm" @onclick="LoadLogs">
                                <i class="bi bi-search"></i> Найти
                            </button>
                        </div>
                    </div>
                    
                    <!-- Быстрые кнопки выбора даты -->
                    <div class="row mt-2">
                        <div class="col-12">
                            <div class="btn-group btn-group-sm" role="group">
                                <button type="button" class="btn btn-outline-secondary" @onclick="() => SetDate(DateTime.Today)">Сегодня</button>
                                <button type="button" class="btn btn-outline-secondary" @onclick="() => SetDate(DateTime.Today.AddDays(-1))">Вчера</button>
                                <button type="button" class="btn btn-outline-secondary" @onclick="() => SetDate(DateTime.Today.AddDays(-2))">Позавчера</button>
                                <button type="button" class="btn btn-outline-secondary" @onclick="() => SetDate(DateTime.Today.AddDays(-7))">Неделю назад</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Таблица логов -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Логи списаний</h5>
            <span class="badge bg-secondary">Всего записей: @logs.Count</span>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Загрузка...</span>
                    </div>
                </div>
            }
            else if (logs.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Дата</th>
                                <th>Клиент</th>
                                <th>Тип тренировки</th>
                                <th>Занятий до</th>
                                <th>Занятий после</th>
                                <th>Дата расписания</th>
                                <th>Тренер</th>
                                <th>Статус абонемента</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in logs)
                            {
                                <tr>
                                    <td>@log.DeductionDate.ToString("dd.MM.yyyy")</td>
                                    <td>@log.ClientFullName</td>
                                    <td>
                                        <span class="badge bg-info">@GetTrainingTypeName(log.TrainingType)@(log.IsMorningMembership ? " У" : "")</span>
                                    </td>
                                    <td>@log.TrainingsBeforeDeduction</td>
                                    <td>@log.TrainingsAfterDeduction</td>
                                    <td>@log.ScheduleDate</td>
                                    <td>@log.TrainerName</td>
                                    <td>
                                        @if (log.MembershipExpired)
                                        {
                                            <span class="badge bg-danger">Завершен</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">Активен</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center text-muted">
                    <p>Логи списаний не найдены</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<MembershipDeductionLogDto> logs = new();
    private bool isLoading = false;
    private DateTime selectedDate = DateTime.Today.AddDays(-1); // Вчерашняя дата по умолчанию

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        isLoading = true;
        try
        {
            logs = (await LogService.GetDeductionLogsAsync(DateOnly.FromDateTime(selectedDate))).ToList();
        }
        catch (Exception ex)
        {
            // Здесь можно добавить обработку ошибок
            Console.WriteLine($"Ошибка загрузки логов: {ex.Message}");
            // Можно добавить уведомление пользователю об ошибке
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SetDate(DateTime date)
    {
        selectedDate = date;
        await LoadLogs();
    }

    private string GetTrainingTypeName(TypeTrainings type)
    {
        return type switch
        {
            TypeTrainings.Sport => "60 Спорт",
            TypeTrainings.Light => "60 Лайт",
            TypeTrainings.BabiesHalf => "30М",
            TypeTrainings.BabiesMixed => "30+30",
            TypeTrainings.Babies => "60М",
            TypeTrainings.Hippotherapy => "Иппотерапия",
            TypeTrainings.PhysicalTraining => "ОФП",
            TypeTrainings.Rent => "Аренда",
            TypeTrainings.Owner => "Частный владелец",
            TypeTrainings.Voltiger => "Вольтижировка",
            TypeTrainings.Group => "Группа",
            TypeTrainings.ExerciseMachine30 => "Тренажёры 30",
            TypeTrainings.ExerciseMachine45 => "Тренажёры 45",
            TypeTrainings.Unknown => "Неизвестно",
            _ => type.ToString()
        };
    }
} 