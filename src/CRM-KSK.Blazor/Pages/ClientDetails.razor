@page "/client-details"
@inject ClientStateService _clientState
@inject NavigationManager _navigation
@inject ClientServiceBlazor _clientService
@inject MembershipServiceBlazor _membershipService

<h3>Подробная информация о клиенте</h3>

@if (_clientState.SelectedClient != null)
{
    var client = _clientState.SelectedClient;

    <div class="component-details">
        @if (IsEditing)
        {
            <label>Имя:</label>
            <input type="text" @bind="client.FirstName" />

            <label>Фамилия:</label>
            <input type="text" @bind="client.LastName" />

            <label>Телефон:</label>
            <input type="text" @bind="client.Phone" />

            <label>Дата рождения:</label>
            <input type="date" @bind="client.DateOfBirth" />

            <label>Родитель:</label>
            <input type="text" @bind="client.ParentName" />

            <label>Телофон родителя:</label>
            <input type="text" @bind="client.ParentPhone" />

            <button class="btn btn-success mt-2" @onclick="SaveChanges">Сохранить</button>
            <button class="btn btn-secondary mt-2" @onclick="CancelEdit">Отмена</button>
        }
        else
        {
            <p><strong>Имя:</strong> @client.FirstName</p>
            <p><strong>Фамилия:</strong> @client.LastName</p>
            <p><strong>Телефон:</strong> @FormatPhoneNumber(client.Phone)</p>
            <p><strong>Дата рождения:</strong> @client.DateOfBirth.ToShortDateString()</p>

            <h5>Данные о родителях</h5>
            <p><strong>Родитель:</strong> @client.ParentName</p>
            <p><strong>Телефон родителя:</strong>@FormatPhoneNumber(client.ParentPhone)</p>

            @if (Memberships.Any())
            {
                <ul>
                    @foreach (var membership in Memberships)
                    {
                        <li class="mb-1">
                            <div>
                                <strong>Статус:</strong> @membership.StatusMembership<br />
                                <strong>Дата начала:</strong> @membership.DateStart<br />
                                <strong>Дата окончания:</strong> @membership.DateEnd<br />
                                <strong>Тренировки:</strong> @membership.AmountTraining<br />
                                <strong>Тип:</strong> @membership.TypeTrainings.GetDisplayName()
                                <button class="btn btn-danger mt-3" title="Удалить абонемент"
                                @onclick="() => ConfirmDelete(membership)">Удалить
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>Абонементов пока нет.</p>
            }

            <button class="btn btn-success" @onclick="() => IsModalOpen = true" >Добавить абонемент</button>
            <button class="btn btn-primary mt-2" @onclick="EditTrainer">Изменить</button>
        }
    </div>

    <button class="btn btn-danger mt-3" @onclick="() => IsDeleteConfirmOpen = true">❌ Удалить клиента</button>

    @if (IsModalOpen)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h4>Добавить абонемент</h4>
                <label>Дата начала:</label>
                <input type="date" @bind="NewMembership.DateStart" />

                <label>Дата окончания:</label>
                <input type="date" @bind="NewMembership.DateEnd" />

                <label>Количество тренировок:</label>
                <input type="number" @bind="NewMembership.AmountTraining" />

                <label>Тип тренировок:</label>
                <select @bind="NewMembership.TypeTrainings">
                    @foreach (var type in Enum.GetValues(typeof(TypeTrainings)))
                    {
                        <option value="@type">@((type as Enum).GetDisplayName())</option>
                    }
                </select>

                <button @onclick="AddMembership" class="btn btn-success mt-2">Сохранить</button>
                <button @onclick="() => IsModalOpen = false" class="btn btn-secondary mt-2">Отмена</button>
            </div>
        </div>
    }

    @if (IsDeleteConfirmOpen)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h4>Подтверждение удаления</h4>
                <p>Вы действительно хотите удалить клиента?</p>
                <button class="btn btn-danger mt-2" @onclick="DeleteClient">Удалить</button>
                <button class="btn btn-secondary mt-2" @onclick="() => IsDeleteConfirmOpen = false">Отмена</button>
            </div>
        </div>
    }
}
else
{
    <p class="alert alert-warning">Клиент не выбран. Перейдите на страницу <a href="/clients">управления клиентами</a>.</p>
}
<button class="btn btn-secondary mt-3" @onclick="GoBack">Назад</button>

<style>
    .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1050;
    }

    .modal-dialog {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    max-width: 300px;
    width: 100%;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    }
</style>

@code {

    private bool IsEditing = false;
    private bool IsModalOpen = false;
    private bool IsDeleteConfirmOpen = false;

    private MembershipDto NewMembership = new();
    private List<MembershipDto> NewMemberships = [];
    private List<MembershipDto> Memberships = [];
    private ClientDto? OriginalClientCopy;

    protected override async Task OnInitializedAsync()
    {
        if (_clientState.SelectedClient == null)
        {
            Console.WriteLine("Ошибка id == null");
            return;
        }
        Memberships = await _membershipService.GetAllMembershipClient(_clientState.SelectedClient.Id);
    }

    private async Task AddMembership()
    {
        NewMembership.ClientId = _clientState.SelectedClient.Id;
        NewMemberships.Add(NewMembership);

        await _membershipService.AddMembership(NewMemberships);
        Memberships = await _membershipService.GetAllMembershipClient(_clientState.SelectedClient.Id);
        IsModalOpen = false;
        NewMemberships.Clear();
    }

    private async Task ConfirmDelete(MembershipDto membership)
    {
        await _membershipService.DeleteMembership(membership.Id);
        Memberships = await _membershipService.GetAllMembershipClient(_clientState.SelectedClient.Id);
        StateHasChanged();
    }

    private async Task DeleteClient()
    {
        await _clientService.DeleteClientAsync(_clientState.SelectedClient.Id);
        IsDeleteConfirmOpen = false;
        GoBack();
    }

    private void EditTrainer()
    {
        IsEditing = true;
        OriginalClientCopy = new ClientDto
            {
                FirstName = _clientState.SelectedClient.FirstName,
                LastName = _clientState.SelectedClient.LastName,
                Phone = _clientState.SelectedClient.Phone,
                DateOfBirth = _clientState.SelectedClient.DateOfBirth,
                ParentName = _clientState.SelectedClient.ParentName,
                ParentPhone = _clientState.SelectedClient.ParentPhone
            };
    }

    private async Task SaveChanges()
    {
        if (_clientState.SelectedClient != null)
        {
            var success = await _clientService.UpdateClientInfo(_clientState.SelectedClient);
            if (success)
            {
                IsEditing = false;
                Console.WriteLine("Изменения сохранены.");
            }
            else
            {
                Console.WriteLine("Ошибка при сохранении.");
            }
        }
    }

    private void CancelEdit()
    {
        if (OriginalClientCopy != null)
        {
            _clientState.SelectedClient.FirstName = OriginalClientCopy.FirstName;
            _clientState.SelectedClient.LastName = OriginalClientCopy.LastName;
            _clientState.SelectedClient.Phone = OriginalClientCopy.Phone;
            _clientState.SelectedClient.DateOfBirth = OriginalClientCopy.DateOfBirth;
            _clientState.SelectedClient.ParentName = OriginalClientCopy.ParentName;
            _clientState.SelectedClient.ParentPhone = OriginalClientCopy.ParentPhone;
        }
        IsEditing = false;
    }

    private string FormatPhoneNumber(string phone)
    {
        if (string.IsNullOrEmpty(phone) || phone.Length != 10)
            return phone;

        return $"+7 ({phone.Substring(0, 3)}) {phone.Substring(3, 3)}-{phone.Substring(6, 2)}-{phone.Substring(8, 2)}";
    }

    private void GoBack()
    {
        _navigation.NavigateTo("/clients");
    }
}