@page "/clients"
@inject NavigationManager _navigation
@inject ClientStateService _clientState
@inject MembershipServiceBlazor _membershipService
@inject ClientServiceBlazor _clientService

<div class="container-fluid">
    <!-- Заголовок страницы с поиском -->
    <div class="row justify-content-center mb-4">
        <div class="col-auto">
            <div class="page-header">
                <h2 class="page-title">
                    <i class="bi bi-people me-2"></i>
                    Клиенты
                </h2>
            </div>
        </div>
        <div class="col-auto">
            <input type="text" class="form-control" style="max-width: 300px;" @bind="SearchClient" @bind:event="oninput" placeholder="Поиск по имени или фамилии" />
        </div>
</div>

@if (filteredClients is not null && filteredClients.Any())
{
    <div class="clients-grid">
        @foreach (var client in filteredClients)
        {
            <div class="client-card @(HasActiveMemberships(client) ? "has-memberships" : "no-memberships")"
                 @onclick="() => ShowClientDetails(client)">
                
                <!-- Заголовок карточки -->
                <div class="client-header">
                    <div class="client-info">
                        <h5 class="client-name">@client.LastName @client.FirstName</h5>
                        <div class="client-phone">
                            <i class="bi bi-telephone"></i>
                            <span>@FormatPhoneNumber(client.Phone)</span>
                        </div>
                    </div>
                    <div class="client-status">
                        @if (HasActiveMemberships(client))
                        {
                            <span class="status-indicator active">
                                <i class="bi bi-check-circle"></i>
                                Активен
                            </span>
                        }
                        else
                        {
                            <span class="status-indicator inactive">
                                <i class="bi bi-pause-circle"></i>
                                Без абонемента
                            </span>
                        }
                    </div>
                </div>

                <!-- Абонементы -->
                <div class="memberships-preview">
                    @if (client.Memberships is not null && client.Memberships.Any())
                    {
                        var activeMemberships = client.Memberships
                            .Where(m => m.StatusMembership == StatusMembership.Active || m.IsOneTimeTraining)
                            .OrderByDescending(m => m.DateEnd)
                            .Take(2)
                            .ToList();

                        @foreach (var membership in activeMemberships)
                        {
                            <div class="membership-preview @(membership.IsOneTimeTraining ? "one-time" : "regular")">
                                <div class="membership-type">
                                    <span class="type-badge">@membership.TypeTrainings.GetDisplayName()</span>
                                    @if (membership.IsMorning)
                                    {
                                        <span class="morning-indicator">🌅</span>
                                    }
                                </div>
                                <div class="membership-details">
                                    <small class="membership-date">
                                        до @membership.DateEnd.ToShortDateString()
                                    </small>
                                    <small class="membership-count">
                                        осталось: @membership.AmountTraining
                                    </small>
                                </div>
                        </div>
                    }

                        @if (client.Memberships.Count(m => m.StatusMembership == StatusMembership.Active || m.IsOneTimeTraining) > 2)
                    {
                            <div class="more-memberships">
                                <small>+@(client.Memberships.Count(m => m.StatusMembership == StatusMembership.Active || m.IsOneTimeTraining) - 2) еще</small>
                            </div>
                        }
                    }
                </div>

                <!-- Стрелка -->
                <div class="card-arrow">
                <i class="bi bi-chevron-right"></i>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="no-clients">
        <i class="bi bi-person-x"></i>
        <h4>Клиенты не найдены</h4>
        <p>Попробуйте изменить поисковый запрос</p>
    </div>
}
</div>

<style>
    /* Стили для поиска */
    .form-control {
        border-radius: 8px;
        border: 2px solid #e9ecef;
        transition: border-color 0.2s ease;
    }

    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    /* Сетка клиентов */
    .clients-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    /* Карточка клиента */
    .client-card {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        padding: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        position: relative;
        overflow: hidden;
    }

    .client-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        border-color: #007bff;
    }

    .client-card.has-memberships {
        border-left: 4px solid #28a745;
    }

    .client-card.no-memberships {
        border-left: 4px solid #6c757d;
    }

    /* Заголовок карточки */
    .client-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 16px;
    }

    .client-info {
        flex: 1;
        min-width: 0;
    }

    .client-name {
        margin: 0 0 4px 0;
        font-size: 18px;
        font-weight: 600;
        color: #212529;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .client-phone {
        display: flex;
        align-items: center;
        gap: 6px;
        color: #6c757d;
        font-size: 14px;
    }

    .client-phone i {
        color: #007bff;
    }

    .client-status {
        flex-shrink: 0;
    }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: 4px;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 600;
    }

    .status-indicator.active {
        background: #d4edda;
        color: #155724;
    }

    .status-indicator.inactive {
        background: #e2e3e5;
        color: #6c757d;
    }

    /* Превью абонементов */
    .memberships-preview {
        margin-bottom: 12px;
    }

    .membership-preview {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 8px 12px;
        margin-bottom: 8px;
        transition: all 0.2s ease;
    }

    .membership-preview:hover {
        background: #e9ecef;
    }

    .membership-preview.one-time {
        border-left: 3px solid #ffc107;
    }

    .membership-preview.regular {
        border-left: 3px solid #28a745;
    }

    .membership-type {
        display: flex;
        align-items: center;
        gap: 6px;
        margin-bottom: 4px;
    }

    .type-badge {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        color: white;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 11px;
        font-weight: 600;
    }

    .morning-indicator {
        font-size: 12px;
    }

    .membership-details {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 12px;
        color: #6c757d;
    }

    .more-memberships {
        text-align: center;
        color: #007bff;
        font-weight: 500;
        margin-top: 4px;
    }


    /* Стрелка */
    .card-arrow {
        position: absolute;
        top: 20px;
        right: 20px;
        color: #6c757d;
        font-size: 18px;
        transition: all 0.2s ease;
    }

    .client-card:hover .card-arrow {
        color: #007bff;
        transform: translateX(4px);
    }

    /* Состояние "нет клиентов" */
    .no-clients {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

    .no-clients i {
        font-size: 48px;
        color: #dee2e6;
        margin-bottom: 16px;
    }

    .no-clients h4 {
        margin-bottom: 8px;
        color: #495057;
    }

    /* Адаптивность */
    @@media (max-width: 768px) {
        .clients-grid {
            grid-template-columns: 1fr;
            gap: 16px;
        }

        .client-card {
            padding: 16px;
        }

        .client-name {
            font-size: 16px;
        }
    }
</style>

@code {
    private List<ClientDto> allClients = [];

    private string SearchClient { get; set; } = string.Empty;
    private List<ClientDto> filteredClients => allClients
        .Where(c => string.IsNullOrEmpty(SearchClient) || 
            c.FirstName.Contains(SearchClient, StringComparison.OrdinalIgnoreCase) ||
            c.LastName.Contains(SearchClient, StringComparison.OrdinalIgnoreCase))
        .OrderByDescending(c => HasActiveMemberships(c))
        .ThenBy(c => c.LastName)
        .ThenBy(c => c.FirstName)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        allClients = await _clientService.GetAllClientsWithMemberships();
    }

    private void ShowClientDetails(ClientDto client)
    {
        _clientState.SelectedClient = client;
        _navigation.NavigateTo("/client-details");
    }

    private string FormatPhoneNumber(string phone)
    {
        if (string.IsNullOrEmpty(phone) || phone.Length != 10)
            return phone;

        return $"+7 ({phone.Substring(0, 3)}) {phone.Substring(3, 3)}-{phone.Substring(6, 2)}-{phone.Substring(8, 2)}";
    }

    private bool HasActiveMemberships(ClientDto client)
    {
        return client.Memberships?.Any(m => m.StatusMembership == StatusMembership.Active || m.IsOneTimeTraining) == true;
    }
}
