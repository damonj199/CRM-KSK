@page "/clients"
@inject NavigationManager _navigation
@inject ClientStateService _clientState
@inject MembershipServiceBlazor _membershipService
@inject ClientServiceBlazor _clientService

<h3>Управление клиентами</h3>

<div class="d-flex justify-content-center mb-4">
    <input type="text" class="form-control w-50" @bind="SearchClient" @bind:event="oninput" placeholder="Поиск по имени или фамилии" />
</div>

@if (filteredClients is not null && filteredClients.Any())
{
    <div class="list-group">
        @foreach (var client in filteredClients)
        {
            <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center flex-wrap"
                 style="cursor: pointer;" @onclick="() => ShowClientDetails(client)">
                <div class="flex-grow-1">
                    <strong>@client.LastName @client.FirstName</strong>
                    <span class="text-muted ms-2">📞 @FormatPhoneNumber(client.Phone)</span>

                    @if (client.Memberships is not null && client.Memberships.Any())
                    {
                        <div class="mt-2 d-flex flex-wrap align-items-center">
                            @foreach (var m in client.Memberships.OrderByDescending(m => m.DateEnd))
                            {
                                bool isActive = m.StatusMembership == StatusMembership.Активный;

                                <span class="badge me-2 @(isActive ? "bg-success" : "bg-secondary")">
                                    @m.TypeTrainings.GetDisplayName()
                                </span>
                                <small class="me-3 text-muted">
                                    до @m.DateEnd.ToShortDateString(), осталось: @m.AmountTraining
                                </small>
                            }
                        </div>
                    }
                    else
                    {
                        <span class="text-muted ms-3"><em>Нет активных абонементов</em></span>
                    }
                </div>
                <i class="bi bi-chevron-right"></i>
            </div>
        }
    </div>
}
else
{
    <p class="text-center">Клиенты не найдены.</p>
}

<style>
    .list-group-item {
        font-size: 0.95rem;
        padding: 12px 16px;
        transition: background-color 0.2s ease-in-out;
    }

        .list-group-item:hover {
            background-color: #f1f1f1;
        }

    .form-control.w-50 {
        max-width: 400px;
    }

    .text-decoration-line-through {
        text-decoration: line-through;
    }
</style>

@code {
    private List<ClientDto> allClients = [];

    private string SearchClient { get; set; } = string.Empty;
    private List<ClientDto> filteredClients => allClients
        .OrderByDescending(c =>
            c.FirstName.Contains(SearchClient, StringComparison.OrdinalIgnoreCase) ||
            c.LastName.Contains(SearchClient, StringComparison.OrdinalIgnoreCase))
        .ThenBy(c => c.LastName)
        .ThenBy(c => c.FirstName)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        var expiringMemberships = await _membershipService.GetExpiringMemberships();

        foreach (var membership in expiringMemberships)
        {
            bool isExpired = membership.AmountTraining == 0 || membership.DateEnd.ToDateTime(new TimeOnly(0, 0)) < DateTime.Today;

            if (isExpired && membership.StatusMembership != Core.Enums.StatusMembership.Закончился)
            {
                membership.StatusMembership = Core.Enums.StatusMembership.Закончился;
                await _membershipService.UpdateMembership(membership);
            }
        }

        var SortedExpiringMemberships = expiringMemberships
            .OrderBy(m => m.DateEnd)
            .ThenBy(m => m.AmountTraining)
            .ToList();

        allClients = await _clientService.GetAllClientsWithMemberships();
    }

    private void ShowClientDetails(ClientDto client)
    {
        _clientState.SelectedClient = client;
        _navigation.NavigateTo("/client-details");
    }

    private string FormatPhoneNumber(string phone)
    {
        if (string.IsNullOrEmpty(phone) || phone.Length != 10)
            return phone;

        return $"+7 ({phone.Substring(0, 3)}) {phone.Substring(3, 3)}-{phone.Substring(6, 2)}-{phone.Substring(8, 2)}";
    }
}
