@page "/clients"
@inject NavigationManager _navigation
@inject ClientStateService _clientState
@inject MembershipServiceBlazor _membershipService
@inject ClientServiceBlazor _clientService

<h3>Управление клиентами</h3>

<div class="mb-4">
    <input type="text" @bind="searchQuery" placeholder="Поиск по имени или фамилии" class="form-control" />
    <input type="text" @bind="searchQuery" @oninput="e => FilterClients()" placeholder="Поиск по имени или фамилии" class="form-control" />
</div>

@if (filteredClients is not null && filteredClients.Any())
{
    <div class="list-group">
        @foreach (var client in filteredClients.OrderBy(c => c.LastName))
        {
            <div class="list-group-item" style="cursor: pointer;" @onclick="() => ShowClientDetails(client)">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@client.LastName @client.FirstName</strong><br />
                        <small>📞 @client.Phone</small><br />
                        @if (client.Memberships is not null && client.Memberships.Any())
                        {
                            foreach (var m in client.Memberships.Where(m => m.StatusMembership == StatusMembership.Активный))
                            {
                                <div class="mt-1">
                                    <span class="badge bg-success">@m.TypeTrainings.GetDisplayName()</span>
                                    — до @m.DateEnd.ToShortDateString(), осталось занятий: @m.AmountTraining
                                </div>
                            }
                        }
                        else
                        {
                            <div class="mt-1 text-muted"><em>Нет активных абонементов</em></div>
                        }
                    </div>
                    <i class="bi bi-chevron-right"></i>
                </div>
            </div>
        }
    </div>
}
else
{
    <p class="text-center">Клиенты не найдены.</p>
}

@code {
    private string searchQuery = "";
    private List<ClientDto> allClients = [];
    private List<ClientDto> filteredClients = [];

    protected override async Task OnInitializedAsync()
    {
        var expiringMemberships = await _membershipService.GetExpiringMemberships();

        foreach (var membership in expiringMemberships)
        {
            bool isExpired = membership.AmountTraining == 0 || membership.DateEnd.ToDateTime(new TimeOnly(0, 0)) < DateTime.Today;

            if (isExpired && membership.StatusMembership != Core.Enums.StatusMembership.Закончился)
            {
                membership.StatusMembership = Core.Enums.StatusMembership.Закончился;
                await _membershipService.UpdateMembership(membership);
            }
        }

        var SortedExpiringMemberships = expiringMemberships
            .OrderBy(m => m.DateEnd)
            .ThenBy(m => m.AmountTraining)
            .ToList();

        allClients = await _clientService.GetAllClientsWithMemberships();
        FilterClients();
    }

    private void FilterClients()
    {
        filteredClients = string.IsNullOrWhiteSpace(searchQuery)
            ? allClients
            : allClients.Where(c =>
                c.FirstName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                c.LastName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void ShowClientDetails(ClientDto client)
    {
        _clientState.SelectedClient = client;
        _navigation.NavigateTo("/client-details");
    }
}
