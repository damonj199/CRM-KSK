@page "/horses-schedule"
@inject HorsesServiceBlazor _horsesService

<div class="header-container">
    <h3 class="title">Работа лошадей</h3>
    <div class="navigation-buttons">
        <button @onclick="NavigateToPreviousWeek" class="btn btn-secondary">← Пред.</button>
        <span class="current-week">@GetCurrentWeekRange()</span>
        <button @onclick="NavigateToNextWeek" class="btn btn-secondary">След. →</button>
    </div>
</div>

<div class="horse-schedule-container">
    <table class="horse-schedule-table">
        <thead>
            <tr>
                <th>№</th>
                <th>Кличка</th>
                @foreach (var day in weekDates)
                {
                    <th>
                        <div>@GetDayOfWeek(day.ToString())</div>
                        <div class="small-date">@day.ToString("dd.MM.yyyy")</div>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @for (int i = 1; i <= 25; i++)
            {
                var rowNumber = i;
                <tr>
                    <td class="row-number">@rowNumber</td>
                    <td>
                        <input class="horse-name-input"
                               @bind="_horseNames[rowNumber]"
                               @onblur="@(() => UpdateHorseName(rowNumber))" />
                    </td>
                    @foreach (var day in weekDates)
                    {
                        <td>
                            <input class="activity-input"
                                   @bind="_contentText[rowNumber][day]"
                                   @onblur="@(() => UpdateContentText(rowNumber, day))" />
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    .horse-schedule-container {
        overflow-x: auto;
        margin-top: 4px;
        padding-top: 0;
    }

    .horse-schedule-table {
        margin-top: 0;
    }

        .horse-schedule-table th, .horse-schedule-table td {
            border: 1px solid #ddd;
            padding: 4px;
            text-align: center;
        }

        .horse-schedule-table th {
            background-color: #f2f2f2;
            position: sticky;
            top: 0;
            min-width: 100px;
        }

    .row-number {
        width: 40px;
        font-weight: bold;
    }

    .horse-name-input {
        width: 120px;
        padding: 4px;
        box-sizing: border-box;
    }

    .activity-input {
        width: 100%;
        padding: 5px;
        box-sizing: border-box;
    }

    .navigation-buttons {
        margin: 8px 0;
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .current-week {
        font-weight: bold;
        margin: 0 10px;
    }

    .small-date {
        font-size: 0.8em;
        color: #666;
    }

    .header-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin: 0 0 4px 0;
    }

    .title {
        margin: 0;
        padding: 0;
        white-space: nowrap;
    }

    .navigation-buttons {
        display: flex;
        align-items: center;
        gap: 5px;
        margin: 0;
    }

    .current-week {
        font-weight: bold;
        font-size: 0.9rem;
        margin: 0 3px;
        white-space: nowrap;
    }

    .btn {
        padding: 2px 6px;
        font-size: 0.8rem;
        min-width: 24px;
    }
</style>

@code {
    private List<HorseDto> horses = new();
    private List<WorkHorseDto> workScheduleData = new();
    private List<DateOnly> weekDates = new();

    private Dictionary<int, Dictionary<DateOnly, string>> _contentText = new();
    private Dictionary<int, string> _horseNames = new();

    private DateOnly startOfWeek;

    protected override async Task OnInitializedAsync()
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        startOfWeek = today.AddDays(-(int)today.DayOfWeek + (int)DayOfWeek.Monday);

        Console.WriteLine($"проверяем дату начала недели {startOfWeek.ToString()}");

        await LoadHorses();
        await GenerateWeekAndInitialize();
    }

    private async Task LoadHorses()
    {
        horses = await _horsesService.GetHorsesNameWeek(startOfWeek);

        foreach (var horse in horses)
        {
            _horseNames[horse.RowNumber] = horse.Name;
        }
    }

    private async Task GenerateWeekAndInitialize()
    {
        weekDates = Enumerable.Range(0, 7)
            .Select(i => startOfWeek.AddDays(i))
            .ToList();

        _contentText.Clear();

        for (int i = 1; i <= 25; i++)
        {
            if (!_horseNames.ContainsKey(i))
            {
                _horseNames[i] = "";
            }

            _contentText[i] = new Dictionary<DateOnly, string>();
            foreach (var day in weekDates)
            {
                _contentText[i][day] = "";
            }
        }

        await LoadScheduleData(startOfWeek);
    }

    private string GetCurrentWeekRange()
    {
        var start = startOfWeek.ToString("dd.MM.yyyy");
        var end = startOfWeek.AddDays(6).ToString("dd.MM.yyyy");
        return $"{start} - {end}";
    }

    private List<string> DaysWithDates =>
        weekDates.Select(date => date.ToString("dd.MM.yyyy")).ToList();

    private string GetDayOfWeek(string date)
    {
        return DateTime.ParseExact(date, "dd.MM.yyyy", CultureInfo.InvariantCulture)
            .ToString("dddd", new CultureInfo("ru-RU"));
    }

    private async Task LoadScheduleData(DateOnly startOfWeek)
    {
        workScheduleData = await _horsesService.GetWeeksSchedule(startOfWeek);
        Console.WriteLine($"проверяем выгрузку расписания за неделю {workScheduleData.Count}");

        if (workScheduleData.Count <= 0)
        {
            workScheduleData = await _horsesService.GetAllWorkHorses();
            Console.WriteLine($"проверяем выгрузку расписания за все время {workScheduleData.Count}");
        }

        foreach (var entry in workScheduleData)
        {
            if (!_contentText.ContainsKey(entry.RowNumber))
                _contentText[entry.RowNumber] = new();

            _contentText[entry.RowNumber][entry.Date] = entry.ContentText;
        }
    }

    private async Task UpdateHorseName(int rowNumber)
    {
        if (!_horseNames.TryGetValue(rowNumber, out var horseName))
            horseName = "";

        var existingHorse = horses.FirstOrDefault(h => h.RowNumber == rowNumber);

        if (existingHorse != null)
        {
            // Обновляем существующую HorseDto
            existingHorse.Name = horseName;
            await _horsesService.AddHorse(existingHorse); // Предполагается, что такой метод существует
        }
        else
        {
            // Создаем новую HorseDto
            var newHorse = new HorseDto
            {
                RowNumber = rowNumber,
                Name = horseName,
                StartWeek = startOfWeek // Или другое подходящее значение
            };
            await _horsesService.AddHorse(newHorse); // Предполагается, что такой метод существует
            horses.Add(newHorse);
        }
    }

    private async Task UpdateContentText(int rowNumber, DateOnly date)
    {
        if (!_contentText.TryGetValue(rowNumber, out var dailyDict) ||
            !dailyDict.TryGetValue(date, out var contentText))
            contentText = "";

        contentText = contentText?.Trim() ?? "";

        var horseName = _horseNames.ContainsKey(rowNumber) ? _horseNames[rowNumber] : "";
        var existingWorkEntry = workScheduleData.FirstOrDefault(x => x.RowNumber == rowNumber && x.Date == date);

        Console.WriteLine($"DEBUG: startOfWeek = {startOfWeek}");
        if (string.IsNullOrWhiteSpace(contentText))
        {
            // Если содержимое пустое — удаляем запись, если она существует
            if (existingWorkEntry != null)
            {
                await _horsesService.DeleteWorkHorse(existingWorkEntry.Id);
                workScheduleData.Remove(existingWorkEntry);
            }
        }
        else
        {
            if (existingWorkEntry != null)
            {
                // Обновление существующей записи WorkHorseDto
                existingWorkEntry.ContentText = contentText;

                await _horsesService.AddWorkHorse(existingWorkEntry); // Предполагается, что такой метод существует
            }
            else
            {
                // Создание новой записи WorkHorseDto
                var newDto = new WorkHorseDto
                    {
                        RowNumber = rowNumber,
                        Date = date,
                        ContentText = contentText
                    };

                await _horsesService.AddWorkHorse(newDto);
                workScheduleData.Add(newDto);
            }
        }
    }

    private async Task NavigateToPreviousWeek()
    {
        startOfWeek = startOfWeek.AddDays(-7);
        await GenerateWeekAndInitialize();
        StateHasChanged();
    }

    private async Task NavigateToNextWeek()
    {
        startOfWeek = startOfWeek.AddDays(7);
        await GenerateWeekAndInitialize();
        StateHasChanged();
    }
}