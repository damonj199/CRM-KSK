@page "/history"
@inject ScheduleServiceBlazor _scheduleService
@inject TrainerServiceBlazor _trainerService

<h3>История тренировок</h3>

<div class="filters">
    <label>Начальная дата:</label>
    <input type="date" @bind="StartDate" />

    <label>Конечная дата:</label>
    <input type="date" @bind="EndDate" />

    <label>Выберите тренера:</label>
    <select @bind="SelectedTrainerId" @bind:event="onchange">
        <option value="">Все тренеры</option>
        @foreach (var trainer in Trainers)
        {
            <option value="@trainer.Id">@trainer.FirstName @trainer.LastName</option>
        }
    </select>
    <button @onclick="LoadScheduleHistory">Показать</button>
</div>

<table class="history-table">
    <thead>
        <tr>
            <th>Дата</th>
            <th>Время</th>
            <th>Тренер</th>
            <th>Клиенты</th>
            <th>Тип тренировки</th>
        </tr>
    </thead>
    <tbody>
        @if (FilteredSchedules.Any())
        {
            @foreach (var schedule in FilteredSchedules)
            {
                @foreach (var training in schedule.Trainings)
                {
                    <tr>
                        <td>@schedule.Date.ToString("dd.MM.yyyy")</td>
                        <td>@schedule.Time.ToString(@"hh\:mm")</td>
                        <td style="background-color:@training.TrainerName.Color; padding: 3px; margin:2px; border-radius:2px;">
                            @training.TrainerName.FirstName @training.TrainerName.LastName
                        </td>
                        <td>
                            @foreach (var client in training.ClientsName)
                            {
                                <span>@client.FirstName @client.LastName</span><br />
                            }
                        </td>
                        <td>@training.TypeTrainings.GetDisplayName()</td>
                    </tr>
                }
            }
        }
        else
        {
            <tr>
                <td colspan="5">Нет данных за этот период</td>
            </tr>
        }
    </tbody>
</table>

<style>
    .filters {
    margin-bottom: 15px;
    display: flex;
    gap: 10px;
    align-items: center;
    }

    .history-table {
    min-width: 70%;
    border-collapse: collapse;
    text-align: left;
    }

    .history-table th, .history-table td {
    border: 1px solid #ccc;
    overflow: hidden;
    text-overflow: ellipsis;
    padding: 5px;
    white-space: nowrap;
    }

    .history-table th {
    background-color: #f4f4f4;
    }
</style>

@code {
    private DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Today.AddDays(-7));
    private DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
    private Guid? SelectedTrainerId;
    private IReadOnlyList<ScheduleDto> HistorySchedules = [];
    private IReadOnlyList<ScheduleDto> FilteredSchedules = [];
    private List<TrainerDto> Trainers = [];

    protected override async Task OnInitializedAsync()
    {
        Trainers = await _trainerService.GetAllTrainers() ?? [];
        await LoadScheduleHistory();
    }

    private async Task LoadScheduleHistory()
    {
        if (EndDate < StartDate)
            return;

        HistorySchedules = await _scheduleService.GetScheduleHistory(StartDate, EndDate) ?? [];
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (SelectedTrainerId == null)
        {
            FilteredSchedules = HistorySchedules;
        }
        else
        {
            FilteredSchedules = HistorySchedules
                .Select(s => new ScheduleDto
                    {
                        Date = s.Date,
                        Time = s.Time,
                        Trainings = s.Trainings
                            .Where(t => t.TrainerName.Id == SelectedTrainerId)
                            .ToList()
                    })
                .Where(s => s.Trainings.Any())
                .ToList();
        }
        StateHasChanged();
    }
}
