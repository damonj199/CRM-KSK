@page "/schedule-history"
@page "/history"
@inject ScheduleServiceBlazor _scheduleService
@inject TrainerServiceBlazor _trainerService
@inject ClientServiceBlazor _clientService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <!-- Заголовок страницы -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="page-header">
                <h2 class="page-title">
                    <i class="bi bi-calendar-check me-2"></i>
                    История тренировок
                </h2>
            </div>
        </div>
    </div>

    @if (IsFilteredByClient)
    {
        <div class="alert alert-info mb-3">
            <i class="bi bi-info-circle me-2"></i>
            <strong>Показываем историю тренировок для:</strong> @SelectedClientName
            <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="ClearClientFilter">
                <i class="bi bi-x-circle me-1"></i>
                Показать всех
            </button>
        </div>
    }

    <div class="filters">
    <label>Показать с:</label>
    <input type="date" @bind="StartDate" />

    <label>По:</label>
    <input type="date" @bind="EndDate" />

    <label>Тренер:</label>
    <select @bind="SelectedTrainerId" @bind:event="onchange">
        <option value="">Все тренеры</option>
        @foreach (var trainer in Trainers)
        {
            <option value="@trainer.Id">@trainer.FirstName @trainer.LastName</option>
        }
    </select>

    <label>Клиент:</label>
    <input type="text" @bind="ClientSearchText" @bind:event="oninput" placeholder="Введите имя или фамилию" />
    <select @bind="SelectedClientId" @bind:event="onchange">
        <option value="">Все клиенты</option>
        @foreach (var client in FilteredClients)
        {
            <option value="@client.Id">@client.FirstName @client.LastName</option>
        }
    </select>
    <button @onclick="LoadScheduleHistory">Показать</button>
</div>

<table class="history-table">
    <thead>
        <tr>
            <th>Дата</th>
            <th>Время</th>
            <th>Тренер</th>
            <th>Клиенты</th>
            <th>Тип тренировки</th>
        </tr>
    </thead>
    <tbody>
        @if (FilteredSchedules.Any())
        {
            @foreach (var schedule in FilteredSchedules)
            {
                @foreach (var training in schedule.Trainings)
                {
                    <tr>
                        <td>@schedule.Date.ToString("dd.MM.yyyy", new CultureInfo("ru-RU")) - 
                            @schedule.Date.ToString("dddd", new CultureInfo("ru-RU"))</td>
                        <td>@schedule.Time.ToString(@"hh\:mm")</td>
                        <td style="background-color:@training.TrainerName.Color; padding: 3px; margin:2px; border-radius:2px;">
                            @training.TrainerName.FirstName @training.TrainerName.LastName
                        </td>
                        <td>
                            @foreach (var client in training.ClientsName)
                            {
                                <span>@client.FirstName @client.LastName</span><br />
                            }
                        </td>
                        <td>@training.TypeTrainings.GetDisplayName()</td>
                    </tr>
                }
            }
        }
        else
        {
            <tr>
                <td colspan="5">Нет данных за этот период</td>
            </tr>
        }
    </tbody>
</table>
</div>

<style>
    .filters {
        margin-bottom: 15px;
        display: flex;
        gap: 10px;
        align-items: center;
        flex-wrap: wrap;
    }

    .filters label {
        font-weight: bold;
        margin-right: 5px;
    }

    .filters input,
    .filters select {
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .filters button {
        padding: 5px 15px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .filters button:hover {
        background-color: #0056b3;
    }

    .history-table {
        width: 100%;
        border-collapse: collapse;
        text-align: left;
        margin-top: 20px;
    }

    .history-table th, .history-table td {
        border: 1px solid #ccc;
        padding: 8px;
        vertical-align: top;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    .history-table th {
        background-color: #f8f9fa;
        font-weight: bold;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .history-table td {
        background-color: white;
    }

    .history-table tr:hover td {
        background-color: #f8f9fa;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .filters {
            flex-direction: column;
            align-items: stretch;
        }

        .filters > * {
            margin-bottom: 10px;
        }

        .history-table {
            font-size: 0.9rem;
        }

        .history-table th, .history-table td {
            padding: 6px;
        }
    }

    @@media (max-width: 576px) {
        .history-table {
            font-size: 0.8rem;
        }

        .history-table th, .history-table td {
            padding: 4px;
        }
    }
</style>

@code {
    private DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Today.AddDays(-7));
    private DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Today.AddDays(-1));
    private string ClientSearchText { get; set; } = string.Empty;

    private Guid? SelectedTrainerId;
    private Guid? SelectedClientId;

    private IReadOnlyList<ScheduleDto> HistorySchedules = [];
    private IReadOnlyList<ScheduleDto> FilteredSchedules = [];
    private IReadOnlyList<ClientDto> FilteredClients = [];
    private IReadOnlyList<TrainerDto> Trainers = [];
    private IReadOnlyList<ClientDto> Clients = [];

    // Свойства для отображения информации о фильтрации по клиенту
    private bool IsFilteredByClient => SelectedClientId.HasValue;
    private string SelectedClientName => IsFilteredByClient 
        ? Clients.FirstOrDefault(c => c.Id == SelectedClientId)?.FirstName + " " + 
          Clients.FirstOrDefault(c => c.Id == SelectedClientId)?.LastName ?? "Неизвестный клиент"
        : "";

    protected override async Task OnInitializedAsync()
    {
        Trainers = (await _trainerService.GetAllTrainers() ?? []).OrderBy(t => t.FirstName).ToList();
        Clients = await _clientService.GetAllClientsAsync() ?? [];
        FilteredClients = Clients;

        // Обработка URL параметров
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = ParseQueryString(uri.Query);
        
        if (queryParams.TryGetValue("clientId", out var clientIdParam) &&
            Guid.TryParse(clientIdParam, out var clientId))
        {
            SelectedClientId = clientId;
            ClientSearchText = Clients.FirstOrDefault(c => c.Id == clientId)?.FirstName + " " + 
                              Clients.FirstOrDefault(c => c.Id == clientId)?.LastName ?? "";
        }

        if (queryParams.TryGetValue("clientName", out var clientNameParam))
        {
            ClientSearchText = Uri.UnescapeDataString(clientNameParam);
        }

        // Устанавливаем период на последний месяц
        StartDate = DateOnly.FromDateTime(DateTime.Today.AddMonths(-1));
        EndDate = DateOnly.FromDateTime(DateTime.Today);

        await LoadScheduleHistory();
    }

    private async Task LoadScheduleHistory()
    {
        if (EndDate < StartDate)
            return;

        HistorySchedules = await _scheduleService.GetScheduleHistory(StartDate, EndDate) ?? [];

        ApplyFilters();
        FilterClients();
    }

    private void ApplyFilters()
    {
        FilteredSchedules = HistorySchedules
            .Select(s => new ScheduleDto
                {
                    Date = s.Date,
                    Time = s.Time,
                    Trainings = s.Trainings
                        .Where(t =>
                            (SelectedTrainerId == null || t.TrainerName.Id == SelectedTrainerId) &&
                            (SelectedClientId == null || t.ClientsName.Any(c => c.Id == SelectedClientId)))
                        .ToList()
                })
            .Where(s => s.Trainings.Any())
            .OrderByDescending(s => s.Date)
            .ThenBy(s => s.Time)
            .ToList();

        StateHasChanged();
    }

    private void FilterClients()
    {
        if (string.IsNullOrWhiteSpace(ClientSearchText))
        {
            FilteredClients = Clients;
        }
        else
        {
            var search = ClientSearchText.Trim().ToLower();
            FilteredClients = Clients
                .Where(c => c.FirstName.ToLower().Contains(search) || c.LastName.ToLower().Contains(search))
                .ToList();
        }
    }

    private void ClearClientFilter()
    {
        SelectedClientId = null;
        ClientSearchText = string.Empty;
        FilterClients();
        ApplyFilters();
    }

    private Dictionary<string, string> ParseQueryString(string queryString)
    {
        var result = new Dictionary<string, string>();
        
        if (string.IsNullOrEmpty(queryString))
            return result;

        // Убираем начальный '?' если есть
        if (queryString.StartsWith("?"))
            queryString = queryString.Substring(1);

        var pairs = queryString.Split('&', StringSplitOptions.RemoveEmptyEntries);
        
        foreach (var pair in pairs)
        {
            var keyValue = pair.Split('=', 2);
            if (keyValue.Length == 2)
            {
                result[keyValue[0]] = Uri.UnescapeDataString(keyValue[1]);
            }
        }

        return result;
    }
}