@page "/trainers"
@using System.Security.Claims
@inject TrainerServiceBlazor _trainerService
@inject NavigationManager _navigation
@inject TrainerStateService _trainerState
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider _authStateProvider

<div class="container-fluid">
    <!-- Заголовок страницы -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="page-header">
                <h2 class="page-title">
                    <i class="bi bi-person-badge me-2"></i>
                    Тренеры
                </h2>
            </div>
        </div>
    </div>

    <div class="button-container">
    <button class="btn btn-primary" @onclick="ShowAddTrainerModal">Добавить тренера</button>
    <button class="btn btn-success" @onclick="() => showModal = true">Сменить пароль</button>
</div>

<div class="trainers-container mt-5">
    @foreach (var trainer in Trainer)
    {
        <div class="trainer-card" style="border: 5px solid @trainer.Color;"
        a href="/trainer-datails" @onclick="() => ShowTrainerDetails(trainer)">
            <h4>@trainer.LastName</h4>
            <h4>@trainer.FirstName</h4>
            <p>Телефон:<br/> @FormatPhoneNumber(trainer.Phone)</p>
        </div>
    }
</div>

@if (showModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Смена пароля</h3>
            <div class="form-group">
                <label>Старый пароль</label>
                <input type="password" @bind="updatePassword.OldPassword" class="form-control" />
            </div>
            <div class="form-group">
                <label>Новый пароль</label>
                <input type="password" @bind="updatePassword.NewPassword" class="form-control" />
            </div>
            <div class="modal-actions">
                <button class="btn btn-success" @onclick="ChangePassword">Сохранить</button>
                <button class="btn btn-secondary" @onclick="() => showModal = false">Отмена</button>
            </div>
        </div>
    </div>
}
<AddTrainerModal @bind-IsVisible="isAddTrainerModalVisible" />

</div>

<style>
    .trainers-container {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    }

    .trainer-card {
    width: 200px;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    text-align: center;
    cursor: pointer;
    }

    .trainer-card:hover {
    background-color: #f5f5f5;
    }

    .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    }

    .modal {
    background: white;
    padding: 20px;
    border-radius: 10px;
    }
</style>

@code {
    private bool isAddTrainerModalVisible;
    private bool isSearchTrainerModalVisible;

    private UpdatePasswordDto updatePassword = new();
    private List<TrainerDto> Trainer = [];
    private bool showModal = false;
    private Guid? userId;

    private void ShowAddTrainerModal() => isAddTrainerModalVisible = true;
    private void ShowFindTrainerModal() => isSearchTrainerModalVisible = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (Guid.TryParse(userIdClaim, out var parsedUserId))
        {
            userId = parsedUserId;
        }

        Trainer = await _trainerService.GetAllTrainers();
    }

    private void GoToTrainerDetails(Guid id)
    {
        _navigation.NavigateTo($"/trainer-details/{id}");
    }

    private void ShowTrainerDetails(TrainerDto trainer)
    {
        _trainerState.SelectedTrainer = trainer;
        _navigation.NavigateTo("/trainer-details");
    }

    private async Task ChangePassword()
    {
        updatePassword.Id = userId.Value;

        if (string.IsNullOrWhiteSpace(updatePassword.NewPassword))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Введите новый пароль!");
            return;
        }

        var response = await _trainerService.UpdatePassword(updatePassword);

        if (response)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Пароль успешно изменен!");
            showModal = false;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Ошибка при смене пароля.");
        }
    }

    private string FormatPhoneNumber(string phone)
    {
        return $"+7 ({phone.Substring(0, 3)}) {phone.Substring(3, 3)}-{phone.Substring(6, 2)}-{phone.Substring(8, 2)}";
    }
}